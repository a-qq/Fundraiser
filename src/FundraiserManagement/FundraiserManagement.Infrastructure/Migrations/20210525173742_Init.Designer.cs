// <auto-generated />
using System;
using FundraiserManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FundraiserManagement.Infrastructure.Migrations
{
    [DbContext(typeof(FundraiserContext))]
    [Migration("20210525173742_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FundraiserManagement.Domain.FundraiserAggregate.Fundraisers.Fundraiser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(3000)")
                        .HasMaxLength(3000);

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Fundraisers","fund");
                });

            modelBuilder.Entity("FundraiserManagement.Domain.FundraiserAggregate.Participations.Participation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FundraisingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FundraisingId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Participations","fund");
                });

            modelBuilder.Entity("FundraiserManagement.Domain.FundraiserAggregate.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InCash")
                        .HasColumnType("bit");

                    b.Property<Guid>("ParticipationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipationId");

                    b.ToTable("Payments","fund");
                });

            modelBuilder.Entity("FundraiserManagement.Domain.MemberAggregate.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFormTutor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTreasurer")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Members","fund");
                });

            modelBuilder.Entity("SharedKernel.Infrastructure.Concretes.Models.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("requests","idreq");
                });

            modelBuilder.Entity("FundraiserManagement.Domain.FundraiserAggregate.Fundraisers.Fundraiser", b =>
                {
                    b.HasOne("FundraiserManagement.Domain.MemberAggregate.Member", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.OwnsOne("FundraiserManagement.Domain.FundraiserAggregate.Fundraisers.Goal", "Goal", b1 =>
                        {
                            b1.Property<Guid>("FundraiserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsShared")
                                .HasColumnName("IsGoalShared")
                                .HasColumnType("bit");

                            b1.Property<decimal>("Value")
                                .HasColumnName("Goal")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("FundraiserId");

                            b1.ToTable("Fundraisers");

                            b1.WithOwner()
                                .HasForeignKey("FundraiserId");
                        });
                });

            modelBuilder.Entity("FundraiserManagement.Domain.FundraiserAggregate.Participations.Participation", b =>
                {
                    b.HasOne("FundraiserManagement.Domain.FundraiserAggregate.Fundraisers.Fundraiser", "Fundraising")
                        .WithMany("Participations")
                        .HasForeignKey("FundraisingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FundraiserManagement.Domain.MemberAggregate.Member", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("FundraiserManagement.Domain.FundraiserAggregate.Payments.Payment", b =>
                {
                    b.HasOne("FundraiserManagement.Domain.FundraiserAggregate.Participations.Participation", null)
                        .WithMany("Payments")
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FundraiserManagement.Domain.MemberAggregate.Member", b =>
                {
                    b.OwnsOne("FundraiserManagement.Domain.MemberAggregate.Cards.Card", "Card", b1 =>
                        {
                            b1.Property<Guid>("MemberId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Cvc")
                                .HasColumnName("Card_CVC")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<byte?>("Month")
                                .HasColumnName("Card_Month")
                                .HasColumnType("tinyint");

                            b1.Property<string>("Number")
                                .HasColumnName("Card_Number")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<byte?>("Year")
                                .HasColumnName("Card_Year")
                                .HasColumnType("tinyint");

                            b1.HasKey("MemberId");

                            b1.ToTable("Members");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
